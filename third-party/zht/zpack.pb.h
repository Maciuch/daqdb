// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zpack.proto

#ifndef PROTOBUF_INCLUDED_zpack_2eproto
#define PROTOBUF_INCLUDED_zpack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zpack_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_zpack_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_zpack_2eproto();
class ZPack;
class ZPackDefaultTypeInternal;
extern ZPackDefaultTypeInternal _ZPack_default_instance_;
namespace google {
namespace protobuf {
template<> ::ZPack* Arena::CreateMaybeMessage<::ZPack>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ZPack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZPack) */ {
 public:
  ZPack();
  virtual ~ZPack();

  ZPack(const ZPack& from);

  inline ZPack& operator=(const ZPack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZPack(ZPack&& from) noexcept
    : ZPack() {
    *this = ::std::move(from);
  }

  inline ZPack& operator=(ZPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ZPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZPack* internal_default_instance() {
    return reinterpret_cast<const ZPack*>(
               &_ZPack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ZPack* other);
  friend void swap(ZPack& a, ZPack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZPack* New() const final {
    return CreateMaybeMessage<ZPack>(NULL);
  }

  ZPack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ZPack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ZPack& from);
  void MergeFrom(const ZPack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZPack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes opcode = 1;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  const ::std::string& opcode() const;
  void set_opcode(const ::std::string& value);
  #if LANG_CXX11
  void set_opcode(::std::string&& value);
  #endif
  void set_opcode(const char* value);
  void set_opcode(const void* value, size_t size);
  ::std::string* mutable_opcode();
  ::std::string* release_opcode();
  void set_allocated_opcode(::std::string* opcode);

  // optional bytes key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes val = 3;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 3;
  const ::std::string& val() const;
  void set_val(const ::std::string& value);
  #if LANG_CXX11
  void set_val(::std::string&& value);
  #endif
  void set_val(const char* value);
  void set_val(const void* value, size_t size);
  ::std::string* mutable_val();
  ::std::string* release_val();
  void set_allocated_val(::std::string* val);

  // optional bytes newval = 4;
  bool has_newval() const;
  void clear_newval();
  static const int kNewvalFieldNumber = 4;
  const ::std::string& newval() const;
  void set_newval(const ::std::string& value);
  #if LANG_CXX11
  void set_newval(::std::string&& value);
  #endif
  void set_newval(const char* value);
  void set_newval(const void* value, size_t size);
  ::std::string* mutable_newval();
  ::std::string* release_newval();
  void set_allocated_newval(::std::string* newval);

  // optional bytes lease = 5;
  bool has_lease() const;
  void clear_lease();
  static const int kLeaseFieldNumber = 5;
  const ::std::string& lease() const;
  void set_lease(const ::std::string& value);
  #if LANG_CXX11
  void set_lease(::std::string&& value);
  #endif
  void set_lease(const char* value);
  void set_lease(const void* value, size_t size);
  ::std::string* mutable_lease();
  ::std::string* release_lease();
  void set_allocated_lease(::std::string* lease);

  // optional bool valnull = 6;
  bool has_valnull() const;
  void clear_valnull();
  static const int kValnullFieldNumber = 6;
  bool valnull() const;
  void set_valnull(bool value);

  // optional bool newvalnull = 7;
  bool has_newvalnull() const;
  void clear_newvalnull();
  static const int kNewvalnullFieldNumber = 7;
  bool newvalnull() const;
  void set_newvalnull(bool value);

  // optional int32 replicanum = 8;
  bool has_replicanum() const;
  void clear_replicanum();
  static const int kReplicanumFieldNumber = 8;
  ::google::protobuf::int32 replicanum() const;
  void set_replicanum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZPack)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr opcode_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  ::google::protobuf::internal::ArenaStringPtr newval_;
  ::google::protobuf::internal::ArenaStringPtr lease_;
  bool valnull_;
  bool newvalnull_;
  ::google::protobuf::int32 replicanum_;
  friend struct ::TableStruct_zpack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZPack

// optional bytes opcode = 1;
inline bool ZPack::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZPack::clear_opcode() {
  opcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ZPack::opcode() const {
  // @@protoc_insertion_point(field_get:ZPack.opcode)
  return opcode_.GetNoArena();
}
inline void ZPack::set_opcode(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZPack.opcode)
}
#if LANG_CXX11
inline void ZPack::set_opcode(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZPack.opcode)
}
#endif
inline void ZPack::set_opcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZPack.opcode)
}
inline void ZPack::set_opcode(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZPack.opcode)
}
inline ::std::string* ZPack::mutable_opcode() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ZPack.opcode)
  return opcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZPack::release_opcode() {
  // @@protoc_insertion_point(field_release:ZPack.opcode)
  if (!has_opcode()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return opcode_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZPack::set_allocated_opcode(::std::string* opcode) {
  if (opcode != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opcode);
  // @@protoc_insertion_point(field_set_allocated:ZPack.opcode)
}

// optional bytes key = 2;
inline bool ZPack::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZPack::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ZPack::key() const {
  // @@protoc_insertion_point(field_get:ZPack.key)
  return key_.GetNoArena();
}
inline void ZPack::set_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZPack.key)
}
#if LANG_CXX11
inline void ZPack::set_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZPack.key)
}
#endif
inline void ZPack::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZPack.key)
}
inline void ZPack::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZPack.key)
}
inline ::std::string* ZPack::mutable_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ZPack.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZPack::release_key() {
  // @@protoc_insertion_point(field_release:ZPack.key)
  if (!has_key()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000002u;
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZPack::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ZPack.key)
}

// optional bytes val = 3;
inline bool ZPack::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZPack::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ZPack::val() const {
  // @@protoc_insertion_point(field_get:ZPack.val)
  return val_.GetNoArena();
}
inline void ZPack::set_val(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZPack.val)
}
#if LANG_CXX11
inline void ZPack::set_val(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZPack.val)
}
#endif
inline void ZPack::set_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000004u;
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZPack.val)
}
inline void ZPack::set_val(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZPack.val)
}
inline ::std::string* ZPack::mutable_val() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:ZPack.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZPack::release_val() {
  // @@protoc_insertion_point(field_release:ZPack.val)
  if (!has_val()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000004u;
  return val_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZPack::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:ZPack.val)
}

// optional bytes newval = 4;
inline bool ZPack::has_newval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZPack::clear_newval() {
  newval_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ZPack::newval() const {
  // @@protoc_insertion_point(field_get:ZPack.newval)
  return newval_.GetNoArena();
}
inline void ZPack::set_newval(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  newval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZPack.newval)
}
#if LANG_CXX11
inline void ZPack::set_newval(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  newval_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZPack.newval)
}
#endif
inline void ZPack::set_newval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000008u;
  newval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZPack.newval)
}
inline void ZPack::set_newval(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  newval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZPack.newval)
}
inline ::std::string* ZPack::mutable_newval() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:ZPack.newval)
  return newval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZPack::release_newval() {
  // @@protoc_insertion_point(field_release:ZPack.newval)
  if (!has_newval()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000008u;
  return newval_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZPack::set_allocated_newval(::std::string* newval) {
  if (newval != NULL) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  newval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newval);
  // @@protoc_insertion_point(field_set_allocated:ZPack.newval)
}

// optional bytes lease = 5;
inline bool ZPack::has_lease() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZPack::clear_lease() {
  lease_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ZPack::lease() const {
  // @@protoc_insertion_point(field_get:ZPack.lease)
  return lease_.GetNoArena();
}
inline void ZPack::set_lease(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  lease_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZPack.lease)
}
#if LANG_CXX11
inline void ZPack::set_lease(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  lease_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZPack.lease)
}
#endif
inline void ZPack::set_lease(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000010u;
  lease_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZPack.lease)
}
inline void ZPack::set_lease(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  lease_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZPack.lease)
}
inline ::std::string* ZPack::mutable_lease() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:ZPack.lease)
  return lease_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZPack::release_lease() {
  // @@protoc_insertion_point(field_release:ZPack.lease)
  if (!has_lease()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000010u;
  return lease_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZPack::set_allocated_lease(::std::string* lease) {
  if (lease != NULL) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lease_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lease);
  // @@protoc_insertion_point(field_set_allocated:ZPack.lease)
}

// optional bool valnull = 6;
inline bool ZPack::has_valnull() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZPack::clear_valnull() {
  valnull_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ZPack::valnull() const {
  // @@protoc_insertion_point(field_get:ZPack.valnull)
  return valnull_;
}
inline void ZPack::set_valnull(bool value) {
  _has_bits_[0] |= 0x00000020u;
  valnull_ = value;
  // @@protoc_insertion_point(field_set:ZPack.valnull)
}

// optional bool newvalnull = 7;
inline bool ZPack::has_newvalnull() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZPack::clear_newvalnull() {
  newvalnull_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ZPack::newvalnull() const {
  // @@protoc_insertion_point(field_get:ZPack.newvalnull)
  return newvalnull_;
}
inline void ZPack::set_newvalnull(bool value) {
  _has_bits_[0] |= 0x00000040u;
  newvalnull_ = value;
  // @@protoc_insertion_point(field_set:ZPack.newvalnull)
}

// optional int32 replicanum = 8;
inline bool ZPack::has_replicanum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZPack::clear_replicanum() {
  replicanum_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 ZPack::replicanum() const {
  // @@protoc_insertion_point(field_get:ZPack.replicanum)
  return replicanum_;
}
inline void ZPack::set_replicanum(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  replicanum_ = value;
  // @@protoc_insertion_point(field_set:ZPack.replicanum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_zpack_2eproto
