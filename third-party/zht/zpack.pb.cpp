// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zpack.proto

#include "zpack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class ZPackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ZPack> _instance;
} _ZPack_default_instance_;
static void InitDefaultsZPack_zpack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ZPack_default_instance_;
    new (ptr) ::ZPack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZPack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ZPack_zpack_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsZPack_zpack_2eproto}, {}};

void InitDefaults_zpack_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ZPack_zpack_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_zpack_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_zpack_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_zpack_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_zpack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ZPack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZPack, opcode_),
  PROTOBUF_FIELD_OFFSET(::ZPack, key_),
  PROTOBUF_FIELD_OFFSET(::ZPack, val_),
  PROTOBUF_FIELD_OFFSET(::ZPack, newval_),
  PROTOBUF_FIELD_OFFSET(::ZPack, lease_),
  PROTOBUF_FIELD_OFFSET(::ZPack, valnull_),
  PROTOBUF_FIELD_OFFSET(::ZPack, newvalnull_),
  PROTOBUF_FIELD_OFFSET(::ZPack, replicanum_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::ZPack)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ZPack_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_zpack_2eproto = {
  {}, AddDescriptors_zpack_2eproto, "zpack.proto", schemas,
  file_default_instances, TableStruct_zpack_2eproto::offsets,
  file_level_metadata_zpack_2eproto, 1, file_level_enum_descriptors_zpack_2eproto, file_level_service_descriptors_zpack_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_zpack_2eproto = {
  false, InitDefaults_zpack_2eproto, 
  "\n\013zpack.proto\"\211\001\n\005ZPack\022\016\n\006opcode\030\001 \001(\014\022"
  "\013\n\003key\030\002 \001(\014\022\013\n\003val\030\003 \001(\014\022\016\n\006newval\030\004 \001("
  "\014\022\r\n\005lease\030\005 \001(\014\022\017\n\007valnull\030\006 \001(\010\022\022\n\nnew"
  "valnull\030\007 \001(\010\022\022\n\nreplicanum\030\010 \001(\005"
,
  "zpack.proto", &assign_descriptors_table_zpack_2eproto, 153,
};

void AddDescriptors_zpack_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_zpack_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zpack_2eproto = []() { AddDescriptors_zpack_2eproto(); return true; }();

// ===================================================================

void ZPack::InitAsDefaultInstance() {
}
class ZPack::HasBitSetters {
 public:
  static void set_has_opcode(ZPack* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_key(ZPack* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_val(ZPack* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_newval(ZPack* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_lease(ZPack* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_valnull(ZPack* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_newvalnull(ZPack* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_replicanum(ZPack* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZPack::kOpcodeFieldNumber;
const int ZPack::kKeyFieldNumber;
const int ZPack::kValFieldNumber;
const int ZPack::kNewvalFieldNumber;
const int ZPack::kLeaseFieldNumber;
const int ZPack::kValnullFieldNumber;
const int ZPack::kNewvalnullFieldNumber;
const int ZPack::kReplicanumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZPack::ZPack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZPack)
}
ZPack::ZPack(const ZPack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_opcode()) {
    opcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opcode_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  newval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_newval()) {
    newval_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newval_);
  }
  lease_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lease()) {
    lease_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lease_);
  }
  ::memcpy(&valnull_, &from.valnull_,
    static_cast<size_t>(reinterpret_cast<char*>(&replicanum_) -
    reinterpret_cast<char*>(&valnull_)) + sizeof(replicanum_));
  // @@protoc_insertion_point(copy_constructor:ZPack)
}

void ZPack::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ZPack_zpack_2eproto.base);
  opcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lease_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valnull_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replicanum_) -
      reinterpret_cast<char*>(&valnull_)) + sizeof(replicanum_));
}

ZPack::~ZPack() {
  // @@protoc_insertion_point(destructor:ZPack)
  SharedDtor();
}

void ZPack::SharedDtor() {
  opcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lease_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ZPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZPack& ZPack::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ZPack_zpack_2eproto.base);
  return *internal_default_instance();
}


void ZPack::Clear() {
// @@protoc_insertion_point(message_clear_start:ZPack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      opcode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      val_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      newval_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      lease_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&valnull_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replicanum_) -
        reinterpret_cast<char*>(&valnull_)) + sizeof(replicanum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ZPack::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ZPack*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes opcode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_opcode();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_key();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes val = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_val();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes newval = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_newval();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes lease = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_lease();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bool valnull = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_valnull(value);
        break;
      }
      // optional bool newvalnull = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_newvalnull(value);
        break;
      }
      // optional int32 replicanum = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_replicanum(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ZPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZPack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes opcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opcode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes newval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_newval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes lease = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valnull = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_valnull(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valnull_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool newvalnull = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_newvalnull(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newvalnull_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replicanum = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_replicanum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicanum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZPack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ZPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZPack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes opcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->opcode(), output);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes val = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->val(), output);
  }

  // optional bytes newval = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->newval(), output);
  }

  // optional bytes lease = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->lease(), output);
  }

  // optional bool valnull = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->valnull(), output);
  }

  // optional bool newvalnull = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->newvalnull(), output);
  }

  // optional int32 replicanum = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->replicanum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZPack)
}

::google::protobuf::uint8* ZPack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZPack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes opcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->opcode(), target);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes val = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->val(), target);
  }

  // optional bytes newval = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->newval(), target);
  }

  // optional bytes lease = 5;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->lease(), target);
  }

  // optional bool valnull = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->valnull(), target);
  }

  // optional bool newvalnull = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->newvalnull(), target);
  }

  // optional int32 replicanum = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->replicanum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZPack)
  return target;
}

size_t ZPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZPack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes opcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->opcode());
    }

    // optional bytes key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val());
    }

    // optional bytes newval = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->newval());
    }

    // optional bytes lease = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lease());
    }

    // optional bool valnull = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool newvalnull = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 replicanum = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicanum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZPack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZPack)
  GOOGLE_DCHECK_NE(&from, this);
  const ZPack* source =
      ::google::protobuf::DynamicCastToGenerated<ZPack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZPack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZPack)
    MergeFrom(*source);
  }
}

void ZPack::MergeFrom(const ZPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      opcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opcode_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      newval_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newval_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      lease_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lease_);
    }
    if (cached_has_bits & 0x00000020u) {
      valnull_ = from.valnull_;
    }
    if (cached_has_bits & 0x00000040u) {
      newvalnull_ = from.newvalnull_;
    }
    if (cached_has_bits & 0x00000080u) {
      replicanum_ = from.replicanum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ZPack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZPack::CopyFrom(const ZPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZPack::IsInitialized() const {
  return true;
}

void ZPack::Swap(ZPack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZPack::InternalSwap(ZPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opcode_.Swap(&other->opcode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  val_.Swap(&other->val_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newval_.Swap(&other->newval_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lease_.Swap(&other->lease_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(valnull_, other->valnull_);
  swap(newvalnull_, other->newvalnull_);
  swap(replicanum_, other->replicanum_);
}

::google::protobuf::Metadata ZPack::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_zpack_2eproto);
  return ::file_level_metadata_zpack_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ZPack* Arena::CreateMaybeMessage< ::ZPack >(Arena* arena) {
  return Arena::CreateInternal< ::ZPack >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
